= Jenkins应用实践

== 入门

[quote]
----
持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。


----

Jenkins是一个持续集成服务器，简单说，可以用来执行编译和打包任务。

=== jenkins安装

==== 下载和启动
jenkins的安装很简单，系统需求只有JDK一项，最好使用JDK8。

从jenkins官网下载war包，就可以直接运行了，是的这个war可以直接运行。

[listing]
----
java -jar jenkins.war

----

这种方式比yum install jenkins 好的地方在于，能够自动升级主程序，而不必依赖系统软件源

注意事项：

Linux系统注意，一定要创建一个jenkins专用的系统账号，不要和一般用户混用

==== 第一次启动

最好联网，第一次启动的时候要求输入一个密码，这个密码可以再控制台看到。

之后会是一个初始化界面，让你选择推荐安装的插件（要求联网）。

插件下载完成之后会要求输入第一个管理员账号，之后就能够正常登陆

==== 安装插件

登录之后可以在“系统管理”-“插件管理”里面更新插件。插件管理有4个标签：

1. 可更新：本地安装的插件有更新
2. 可选： 能够下载的插件
3. 已安装：已经安装好的插件，能够卸载禁用
4. 高级：设置代理，直接上传插件文件，设置插件更新站点

==== 设置slave节点

通常linux做slave时会使用ssh的方式来通信。也就需要ssh port、user、cert。

安装slave比较简单，在~/.jenkins文件夹里面找到slave.jar(http://yourserver:port/jnlpJars/slave.jar)复制到另一台机器上。

确定一个工作目录，比如 /var/jenkins1

在master机器上用新增一个slave，设置用ssh连接，输入工作目录和slave.jar的位置

注意事项：

1 slave 和master 之间的连接采用的是 stdin 和stdout（输入输出流，不是监听端口）的方式。

2 因为slave是一台全新的机器，环境，工具都和master不同。因此，在配置slave节点的时候要注意用正确的ENV值覆盖，另外tools（jdk，gradle、mvn）部分建议使用jenkins的 自动安装特性，这样jenkins会负责tools的拷贝。

3 可以指定哪些job只能在特定的slave上运行，例如iOS的编译项目。配置好slave以后，可以在任意job的配置页一开头找到“Restrict where this project can be run”，内容填写slave的名字。

=== JOB

==== 概念

Job是jenkins的工作单元，每个job可以看做一个定时任务。

常见的job种类

1. 自由风格： 配置最灵活，可以支持shell ant maven各种工具
2. maven项目：针对maven项目做优化，可以识别到test,package,site,deploy过程，最大限度的减少jenkins这边的配置
3. pipeline项目：新版的job配置，和旧的不兼容
4. 文件夹：容纳其他job的job
5. 多配置项目：用一组参数来管理多个job
6. Multibranch Pipeline：新pipeline模式的job，对应一个git的多个分支。

job的配置项由以下几部分：

1. 名称：不能重复
2. 其他描述信息：显示名，备注
3. job历史保留方式：保留多少个build日志，build结果
4. 源码库：如何取源码库
5. 构建触发器：job如何循环执行，可以是定时任务，轮询源码库，外部触发，上游job触发等等
6. 构建环境：在开始之前的准备工作
7. 构建： 执行buil任务
8. 构建

==== 配置入门

通常开始实施的jenkins会使用：1自由风格job和2maven项目2个

做得好的团队可以使用pipeline job来规范配置过程，将build流程写到源码库中

在jenkins上配详细过程和在Jenkinsfile中配置流程各有优缺点：

job配置，简单入门，方便调试，自由，但量多了不好维护。
Jenkinsfile，有版本管理和源码放在一起，但是不便调试，而且部署过程不可控。

我们的建议是：
1. 规范过程，build过程统一，交付件放在固定位置（job根目录）
2. 部署过程放在jenkins里面，自由调整

后操作： 主要任务执行完之后做的事，例如归档，邮件通知，远程重启等等。

JOB配置的一般策略：

1. 统一命名方式，方便自动化管理：项目代号-项目模块-JOB种类-版本分支-语言-项目种类
2. 使用统一的源码取出账号，使用个人账号会导致JOB不稳定
3. 轮询源码库，或者WEBHOOK触发。轮询在小批量的时候可以，webhook适合大量的job配置场景，因为可以集中配置
4. 在环境准备阶段，常做一些clean工作，保证一个干净的编译，也能发现编译问题
5. 工作阶段，要完成编译，打包，并将打包结果提取到干净的目录中（这样会节约后续的配置量）
6. 后操作，常有发邮件，归档，提取report，SCP/SSH等

注意：jenkins是可扩展的，在官网有许多插件可以使用，在相当一个需求的时候记得在官网查找插件。

== 规划管理制度

管理分为三个话题，权限划分；变更、历史记录；和可视化

=== 项目分级管理

==== 使用Folder分隔JOB📂

 安装插件“cloudbees-folder”后，可以创建一个Folder类型Job，功能和文件系统中的文件夹一模一样。这样可以让job名字不再冲突。

==== 使用角色分隔项目组

 使用 Role Base 插件，搭配 Folder管理不同TEAM的JOB。Role Base配置界面可以使用正则表达式来匹配项目，而Folder插件可以让job有一个共同的父目录，这样一个正则表达式就能方便的设计一组权限了。 角色设置，权限在设置的时候要考虑不同人的用法，一般的开发者，只关注Build的成功、失败、通知、failure report等元素，测试者则关心包的下载，部署环境等等，管理者关心测试覆盖率，报表等等。 jenkins的权限分成5类：

|===
|scope |desc 

|Overall |Overall里面的read是一个基本权限，登录用户必须有这个。另外这里面单独分出一个插件更新的权限 

|Slave |配置Slave的权限是单独的 

|Job |Job权限分：创建、配置、删除、只读、build、workspace、cancel 

|Run |Run是指Job运行一次后的记录，每个run有一个build id。Run可以删除或者编辑原信息 

|View |视图，job的列表 

|Scm |给源代码仓库打TAG 
|===

要点：

1. Overall/Read 权限是最基础的一个权限，如果没有这个那么用户登录以后什么也看不到。
2. 如果想要让用户登录上来只能看到自己有权限的 job 列表，那么不要在全局角色那里配置Job/Read，而是在项目角色处配置Job/Read，这样不同的用户登陆上来看到的列表和View都是不一样的。

=== 安全性

==== 创建Jenkins专用系统账号

jenkins要专门用一个系统账号来启动，不能用root账号，因为jenkins中还会执行shell命令。

账号专用是因为jenkins会管理大量的开发资源和账号，包括：

1. 源代码库，考虑使用SSH KEY登录
2. SSH账号， 操作测试环境中的服务器，FTP
3. 包管理，发布编译包的账号：nexus,jfrog
4. 在应用市场的发布测试APP的账号
5. slave机器的SSH账号

（因此，开发用的Jenkins要和生产用的jenkins分开）

==== 备份jenkins 工作目录

敏感信息都已经加密存储，不能单个文件备份，要备份全部的.jenkins下文件（workspaces）可以忽略。

=== 记录历史

==== 记录JOB配置的变更

 使用“jobConfigHistory”插件可以记录下每次Job配置的变更，防止配置丢失。更可以比较前后两次配置文件的差异。 [TODO: 配图]

==== 规划磁盘空间，Job历史记录

执行job、archive、job history，scm checkout，report，都会占用磁盘的空间，特别是master的空间。master机器上要有足够的空间来供jenkins使用。

1. 取出SCM需要占用空间，实际使用中4G的git也是常见的，取出scm也会占用相当的时间。
2. 归档打包需要占用空间，特别是移动端的包，如今100M的包也很常见。如果每次提交都build的话很快就会占满。
3. report需要占用空间，特别是html形式的report。

保留适当的历史记录，在“job配置”的页面有一栏自动清理策略。

|===
|参数 |说明 

|保持构建的天数 |如果非空，则x天以外的job将会彻底删除。 

|保持构建的最大个数 |或者，保留x个job的记录。 

|发布包保留天数 |和上面两个参数的区别是，仅把artifact删除。一个job中最大的可能是artifact，删除artifact，但保留日志、操作历史、报告等将也是一个减少占用空间的办法。因为想要看到一个项目的长期健康情况（比如历次的测试结果），每次的build报告是必须要有的，否则出不来。 

|发布包最大保留#个构建 |如果非空，最多此数目大构建将保留他们的发布包。 
|===

通常的建议是保留较长时间的“构建”，仅保留近期的”发布包“。这样的效果是能够看到长期的测报表曲线，而同时节省archive空间。

此外没多大意义的run，也可以手工删除。

==== 定期备份配置和密钥

在Jenkins的home目录，有一些敏感参数的配置是加密保存的，密码在重装后是会变的。如果不放心的话记得要备份这些配置文件。

=== 可移植，统一slave，tools的配置

jenkins支持slave并行运行，统一slave配置可以最大限度的让jenkins保持并行运行。#依赖的工具尽可能的通过jenkins来安装，因为jenkins会自动的将这些工具分发到slave上面。#用标签对机器分组，同类的机器可以有同一个标签，这样jenkins会根据负载来分配job#不同通过jenkins安装的工具，就要保证同型机器上的配置是一样的，这样shell脚本才能各处运行。

=== 可视化
CI不仅要安静的工作，更需要想一个仆人一样发现问题及时通知到人。

==== TV视图

“build-monitor-plugin”，可以创建一个简单的大屏视图来放在投影，电视上展示。

[TODO: 配图]

还有插件可以在build失败的时候发出声音。

另外还有一个独立的工具“https://github.com/pivotal/projectmonitor”可以集成大多数CI平台的build result信息。

[TODO: 配图]

1. 1. 晴雨表，⛅️,☁☀

1. 1. 红色黄色蓝色

== 规划JOB配置

=== 统一的Build环境

 Jenkins执行任务依赖各类开发工具：

1. ant
2. ivy
3. maven
4. gradle
5. jdk

工具有系统依赖，环境依赖，配置依赖

jenkins多机部署的时候还有环境参数同步问题。

两种方式：

1. 使用自动安装，自动安装相当于让Jenkins 自动同步所有节点的工具
2. 使用共享磁盘提供统一的路径，这样环境变量只需要设置一次

=== 提供JOB配置演示

创建一个DEMO文件夹里面存放每一种类型的配置JOB样板

1. builder工具配置方法（按照不同开发语言或build工具来分类的配置）
1. java ant
2. java maven
3. java gradle
4. android gralde
5. iOS 
2. 代码扫描（SONAR的配置方法）
3. 发布包（不同的包如何发布到仓库中）
1. JAR,WAR
2. APK
3. iOS
4. 多个JOB的依赖
1. maven项目依赖另一个library项目
2. PIPELINE

=== 规范job配置流程

严格分开打包和部署测试环境两个阶段，期间规范打包交付物的存储位置，为简化部署测试打好基础

不约束具体实现，但约束stage

build 
test 
package
sonar
deploy-artifact
deploy-integration-server
integration-test

=== 账号密码管理

1. 登录账号，使用统一登录系统或者LDAP登录。
2. 源码检出账号
3. SSH账号
4. 包管理账号

== 运维角度

=== 创建CI集群

Jenkins提供Slave-Master集群部署模式，一台master可以管理众多的slave node

=== 标记NODE特征

node的特征按照能力来标记，前文说过build环境要统一，build应该依赖确定的工具而尽量少体现操作系统
一个好的node名字可以是:

- java
- nodejs

